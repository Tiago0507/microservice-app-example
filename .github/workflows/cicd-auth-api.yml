name: Auth API - Dev Build & Deploy

on:
  push:
    branches: [ main, feat/dev/pipelines ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      REMOTE_BASE_DIR: ~/microservice-app-example
      REMOTE_SERVICE_DIR: ~/microservice-app-example/auth-api
      SSH_HOST: 128.24.80.61
      SSH_USERNAME: adminuser
      SSH_PASSWORD: YourComplexPassword123!
      SSH_PORT: 22
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check SSH reachability (port 22)
        run: |
          for i in {1..12}; do
            if timeout 5 bash -c "echo > /dev/tcp/${{ env.SSH_HOST }}/22" 2>/dev/null; then
              echo "SSH port reachable"; exit 0; fi; echo "Waiting for SSH... ($i)"; sleep 5; done; echo "SSH not reachable" >&2; exit 1

      - name: Ensure remote directory exists
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USERNAME }}
          password: ${{ env.SSH_PASSWORD }}
          port: ${{ env.SSH_PORT }}
          timeout: 120s
          command_timeout: 20m
          script: |
            mkdir -p ${{ env.REMOTE_BASE_DIR }}
            mkdir -p ${{ env.REMOTE_SERVICE_DIR }}

      - name: Copy compose files to remote base dir
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USERNAME }}
          password: ${{ env.SSH_PASSWORD }}
          port: ${{ env.SSH_PORT }}
          timeout: 120s
          source: "docker-compose*.yml"
          target: ${{ env.REMOTE_BASE_DIR }}

      - name: Copy microservices folder to remote base dir
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USERNAME }}
          password: ${{ env.SSH_PASSWORD }}
          port: ${{ env.SSH_PORT }}
          timeout: 180s
          source: "microservices/**"
          target: ${{ env.REMOTE_BASE_DIR }}

      - name: Copy auth-api to remote host
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USERNAME }}
          password: ${{ env.SSH_PASSWORD }}
          port: ${{ env.SSH_PORT }}
          timeout: 120s
          source: "microservices/auth-api/**"
          target: ${{ env.REMOTE_SERVICE_DIR }}
          strip_components: 2

      - name: Build and restart auth-api with Docker Compose
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USERNAME }}
          password: ${{ env.SSH_PASSWORD }}
          port: ${{ env.SSH_PORT }}
          timeout: 180s
          command_timeout: 30m
          script: |
            set -euo pipefail
            echo "Reconstruyendo y levantando auth-api vía Docker Compose"
            cd ${{ env.REMOTE_BASE_DIR }}
            
            # Stop and remove all containers using port 8000 (auth-api port)
            echo "Deteniendo contenedores que usan el puerto 8000..."
            CONTAINERS_USING_PORT=$(docker ps -q --filter "publish=8000" || true)
            if [ -n "$CONTAINERS_USING_PORT" ]; then
              echo "Deteniendo contenedores: $CONTAINERS_USING_PORT"
              docker stop $CONTAINERS_USING_PORT || true
              docker rm $CONTAINERS_USING_PORT || true
            fi
            
            # Deep cleanup of Docker resources
            echo "Limpieza profunda de recursos de Docker..."
            docker-compose -f docker-compose.yml down --remove-orphans --volumes || true
            docker container prune -f || true
            docker network prune -f || true
            docker volume prune -f || true
            docker ps -a --filter "name=microservice-app-example" -q | xargs -r docker rm -f || true
            docker image prune -f || true
            
            # Restart Docker daemon if needed
            echo "Verificando estado del daemon de Docker..."
            if ! docker info >/dev/null 2>&1; then
              echo "Reiniciando daemon de Docker..."
              sudo systemctl restart docker || true
              sleep 10
            fi
            
            # Build the auth-api service
            echo "Construyendo auth-api..."
            DOCKER_BUILDKIT=0 COMPOSE_DOCKER_CLI_BUILD=0 docker-compose -f docker-compose.yml build --no-cache auth-api
            
            # Start the services (auth-api depends on users-api and redis)
            echo "Iniciando servicios..."
            docker-compose -f docker-compose.yml up -d --force-recreate --remove-orphans users-api redis auth-api
            
            # Wait for services to start
            sleep 15
            
            # Verify auth-api is running
            CID=$(docker-compose ps -q auth-api || true)
            if [ -z "$CID" ]; then
              echo "No se encontró el contenedor auth-api" >&2
              exit 1
            fi
            RUNNING=$(docker inspect -f '{{.State.Running}}' "$CID")
            if [ "$RUNNING" != "true" ]; then
              echo "El contenedor auth-api no está en ejecución" >&2
              docker logs "$CID" || true
              exit 1
            fi
            echo "auth-api desplegado correctamente"
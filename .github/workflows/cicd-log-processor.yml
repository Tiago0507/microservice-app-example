name: Log Processor - Build & Deploy

on:
  push:
    branches: [ main ]
    paths:
      - 'microservices/log-message-processor/**'
      - '.github/workflows/cicd-log-processor.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'microservices/log-message-processor/**'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      REMOTE_BASE_DIR: ~/microservice-app-example
      SERVICE_NAME: log-message-processor

    steps:
      - name: 1. Checkout del código
        uses: actions/checkout@v4

      - name: 2. Crear directorios y copiar archivos necesarios
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            mkdir -p ${{ env.REMOTE_BASE_DIR }}/microservices/${{ env.SERVICE_NAME }}

      - name: 3. Copiar archivos de Docker Compose
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          source: "docker-compose.yml,docker-compose.prod.yml"
          target: ${{ env.REMOTE_BASE_DIR }}
          
      - name: 4. Copiar código del microservicio
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          source: "microservices/${{ env.SERVICE_NAME }}"
          target: "${{ env.REMOTE_BASE_DIR }}/microservices/"

      - name: 5. Reconstruir y reiniciar el servicio con Docker Compose
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            set -e
            cd ${{ env.REMOTE_BASE_DIR }}
            echo "--> Reconstruyendo el contenedor de ${{ env.SERVICE_NAME }}..."
            docker-compose build --no-cache ${{ env.SERVICE_NAME }}
            
            echo "--> Reiniciando el contenedor de ${{ env.SERVICE_NAME }}..."
            docker-compose up -d --force-recreate ${{ env.SERVICE_NAME }}
            
            echo "--> Verificando el estado del contenedor..."
            docker-compose ps ${{ env.SERVICE_NAME }}
            echo "Despliegue de ${{ env.SERVICE_NAME }} completado."
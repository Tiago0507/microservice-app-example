name: Infrastructure CI/CD Pipeline

on:
  push:
    branches: [ main, feat/ops/pipelines ]
    paths:
      - 'iac/**'
      - '.github/workflows/cicd-infrastructure.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'iac/**'
      - '.github/workflows/cicd-infrastructure.yml'
  workflow_dispatch:
    inputs:
      destroy:
        description: 'Destroy infrastructure'
        required: false
        default: false
        type: boolean

env:
  TF_VERSION: '1.6.0'
  # AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  # AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  # AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  AZURE_CLIENT_ID: "3fe0943f-dc81-4413-9048-3296332bd707"
  #AZURE_CLIENT_SECRET: "TU_SECRET_REAL_AQUI"
  AZURE_TENANT_ID: "e994072b-523e-4bfe-86e2-442c5e10b244"
  AZURE_SUBSCRIPTION_ID: "3fe0943f-dc81-4413-9048-3296332bd707"

jobs:
  terraform-validate:
    name: 'Terraform Validate'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./iac
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Format Check
      run: terraform fmt -check -recursive
      continue-on-error: true

    - name: Terraform Init
      run: terraform init

    - name: Terraform Validate
      run: terraform validate

    - name: Terraform Plan
      run: terraform plan -out=tfplan
      env:
        ARM_CLIENT_ID: ${{ env.AZURE_CLIENT_ID }}
        #ARM_CLIENT_SECRET: ${{ env.AZURE_CLIENT_SECRET }}
        ARM_TENANT_ID: ${{ env.AZURE_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ env.AZURE_SUBSCRIPTION_ID }}

    - name: Terraform Show Plan
      run: terraform show -no-color tfplan

    - name: Upload Plan Artifact
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan
        path: iac/tfplan
        retention-days: 5

  terraform-apply:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    needs: terraform-validate
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    defaults:
      run:
        working-directory: ./iac
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Download Plan Artifact
      uses: actions/download-artifact@v4
      with:
        name: terraform-plan
        path: iac/

    - name: Terraform Init
      run: terraform init

    - name: Terraform Apply
      run: terraform apply -auto-approve tfplan
      env:
        ARM_CLIENT_ID: ${{ env.AZURE_CLIENT_ID }}
        #ARM_CLIENT_SECRET: ${{ env.AZURE_CLIENT_SECRET }}
        ARM_TENANT_ID: ${{ env.AZURE_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ env.AZURE_SUBSCRIPTION_ID }}

    - name: Terraform Output
      run: terraform output -json
      env:
        ARM_CLIENT_ID: ${{ env.AZURE_CLIENT_ID }}
        #ARM_CLIENT_SECRET: ${{ env.AZURE_CLIENT_SECRET }}
        ARM_TENANT_ID: ${{ env.AZURE_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ env.AZURE_SUBSCRIPTION_ID }}

  terraform-destroy:
    name: 'Terraform Destroy (Manual)'
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.destroy == 'true'
    defaults:
      run:
        working-directory: ./iac
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init
      run: terraform init

    - name: Terraform Destroy
      run: terraform destroy -auto-approve
      env:
        ARM_CLIENT_ID: ${{ env.AZURE_CLIENT_ID }}
        #ARM_CLIENT_SECRET: ${{ env.AZURE_CLIENT_SECRET }}
        ARM_TENANT_ID: ${{ env.AZURE_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ env.AZURE_SUBSCRIPTION_ID }}
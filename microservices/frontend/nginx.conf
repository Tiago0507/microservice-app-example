# Nginx Configuration for the Microservices Frontend
#
# This file configures Nginx to act as a web server, a reverse proxy,
# and an API Gateway for the application. It serves the static Vue.js frontend
# and intelligently routes API requests to the appropriate backend microservices.

server {
    # Defines the network endpoint on which the server listens for requests.
    # Port 80 is the standard port for HTTP traffic inside the container.
    listen 80;

    # Sets the server name. 'localhost' is used for local development.
    server_name localhost;

    # Specifies the root directory from which Nginx serves static files.
    # This path corresponds to where the frontend's compiled assets are copied in the Dockerfile.
    root /usr/share/nginx/html;

    # Defines the default file to serve if a directory is requested.
    index index.html;

    # --- API Gateway Routing Rules ---
    # Nginx processes requests by finding the most specific matching location block.

    # Handles requests for the Authentication API.
    # This is a specific prefix match that catches all traffic directed to /api/auth/.
    location /api/auth/ {
        # Rewrites the incoming request URI to match what the auth-api service expects.
        # The regex `^/api/auth/(.*)$` captures everything after "/api/auth/".
        # The URI is then replaced with the captured part (e.g., "/login").
        # Example: /api/auth/login -> /login
        rewrite ^/api/auth/(.*)$ /$1 break;

        # Forwards the rewritten request to the auth-api microservice.
        # 'http://auth-api:8000' is resolved by Docker's internal DNS.
        proxy_pass http://auth-api:8000;
    }

    # Handles requests for the Todos API.
    # This location block is matched for requests like /api/todos/.
    location /api/todos/ {
        # Rewrites the URI to match the routes defined in the todos-api service.
        # This rule strips the "/api" prefix but keeps the "/todos/" part.
        # Example: /api/todos/123 -> /todos/123
        rewrite ^/api/(.*)$ /$1 break;

        # Forwards the rewritten request to the todos-api microservice.
        proxy_pass http://todos-api:8082;
    }

    # Handles requests for the Zipkin distributed tracing service.
    # This rule directly proxies requests without rewriting the URI, as the
    # target service expects the full path.
    location /api/zipkin {
        proxy_pass http://zipkin:9411/api/v2/spans;
    }

    # --- Single-Page Application (SPA) Fallback ---
    # This is the general "catch-all" rule for any request that did not match
    # the more specific API locations above.
    location / {
        # Instructs Nginx on how to handle requests for the Vue.js application.
        # It first tries to find a file matching the exact URI ($uri).
        # If not found, it tries to find a directory ($uri/).
        # If neither is found, it serves /index.html as a fallback.
        # This is critical for SPAs, as it allows Vue Router to handle client-side routing.
        try_files $uri $uri/ /index.html;
    }
}